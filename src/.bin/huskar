#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import argparse
from termcolor import colored
import subprocess


parser = argparse.ArgumentParser(description='init huskar env to local. supported by Gayson.\ndetail to http://wiki.ele.to:8090/pages/viewpage.action?pageId=43115134',
                                 formatter_class=argparse.RawDescriptionHelpFormatter)

parser.add_argument('env', help='specific the env, options: alta, alpha, none')
parser.add_argument('--cluster', default='alpha_stable',
                    help='specific the cluster (default: alpha_stable)')
parser.add_argument('--file', default=None,
                    help='specific the env.yml (default: None, generated by env and cluster)')
parser.add_argument('--with-sam', default=True,
                    help='start the sam service (default: True)')
parser.add_argument('--sam-log', default='/dev/null',
                    help='specific the sam service log (default: /dev/null), only useful while --with-sam is True.')


ALPHA_CONFIG = '''env: testing
cluster: {cluster}
zookeeper_configs:
    hosts: soa-zk.alpha.elenet.me:2181,soa-zk-1.alpha.elenet.me:2181,soa-zk-2.alpha.elenet.me:2181
    username: test_admin
    password: MDJhMjFjMGM3
ops_db:
    url: redis://ves-redis.tools.elenet.me:8889
statsd_url: statsd://statsd.alpha.elenet.me:8125
idc: vpc
ezone: xg1
soa_mode: orig
etrace_uri: etrace-config.alpha.elenet.me:2890
gzs_server_domain: gzs-api.alpha.elenet.me:24680
'''

ALTA_CONFIG = '''env: beta
cluster: {cluster}
zookeeper_configs:
    hosts: arch-zk-1.alta.elenet.me:2181,arch-zk-2.alta.elenet.me:2181,arch-zk-3.alta.elenet.me:2181
    username: test_admin
    password: MDJhMjFjMGM3
ops_db:
    url: redis://arch-redis.alta.elenet.me:8889
statsd_url: statsd://statsd.alta.elenet.me:8125
idc: alta
etrace_uri: etrace-config.alta.elenet.me:2890
ezone: alta1
soa_mode: orig
gzs_server_domain: gzs-api.alta.elenet.me
'''


SAM = "sam.osx"

ELESS_ENV_YAML = '/etc/eleme/env.yaml'

ALPHA = "alpha"
ALTA = "alta"
NONE = 'none'

avail_env = [
    ALPHA,
    ALTA,
    NONE,
]

env_configs = {
    ALPHA: ALPHA_CONFIG,
    ALTA: ALTA_CONFIG,
}

env_sam_args = {
    ALPHA: ["-broker", "zk://test_admin:MDJhMjFjMGM3@soa-zk.alpha.elenet.me:2181,soa-zk-1.alpha.elenet.me:2181,soa-zk-2.alpha.elenet.me:2181"],
    ALTA: ["-broker zk://test_admin:MDJhMjFjMGM3@arch-zk-1.alta.elenet.me:2181,arch-zk-2.alta.elenet.me:2181,arch-zk-3.alta.elenet.me:2181"],
}


def info(msg):
    print(colored("[INFO] {}".format(msg), 'green'))


def warning(msg):
    print(colored("[WARN] {}".format(msg), 'yellow'))


def error(msg):
    print(colored("[ERROR] {}".format(msg), 'red'))


def check_bin(executable):
    with open(os.devnull, 'w') as DEV_NULL:
        out = subprocess.Popen("type {}".format(
            executable), shell=True, stdout=DEV_NULL, stderr=DEV_NULL)
        _, code = out.communicate()[0], out.returncode
        if code == 0:
            return True
    return False


def build_sam_run_command(env, log_file):
    args = [SAM] + env_sam_args[env] + ['>>', log_file, "2>&1", "&"]
    return " ".join(args)


def stop_sam():
    raw_sam_pid = subprocess.Popen("pgrep {}".format(
        SAM), shell=True, stdout=subprocess.PIPE).stdout.read()
    sam_pid = raw_sam_pid.decode("utf-8").strip("\n")
    if sam_pid:
        info("kill existed {} service...".format(SAM))
        subprocess.Popen("kill -9 {}".format(sam_pid),
                         shell=True, stdout=subprocess.PIPE)


def write_to_env_file(content):
    with open(ELESS_ENV_YAML, 'w') as f:
        f.write(content)


def print_env_info(content):
    info("success!")
    print("\n{}:".format(ELESS_ENV_YAML))
    print(content)


def clear():
    if os.path.isfile(ELESS_ENV_YAML):
        info("remove {}...".format(ELESS_ENV_YAML))
        os.remove(ELESS_ENV_YAML)
    stop_sam()
    info("clear over.")


def handle(args):
    env_file_content = ""
    if args.file:
        info("load env info from {}".format(args.file))
        with open(args.file, 'r') as f:
            env_content = f.read()
    elif args.env in avail_env:
        if args.env == 'none':
            clear()
            return
        info("load env info from default env {}".format(args.env))
        cluster = args.cluster
        env_content = env_configs.get(args.env).format(cluster=cluster)
    else:
        error("env must be 'alpha' or 'alta' or 'none': {}".format(args.env))
        return

    write_to_env_file(env_content)

    if check_bin(SAM):
        if args.with_sam:
            stop_sam()
            info("start {} service...".format(SAM))
            subprocess.Popen(build_sam_run_command(
                args.env, args.sam_log), shell=True, stdout=subprocess.PIPE)
            info("{} service started, output log: {}".format(SAM, args.sam_log))
    else:
        warning("{bin} not install, skip restart {bin} service.".format(bin=SAM))

    print_env_info(env_content)


if __name__ == '__main__':
    args = parser.parse_args()
    handle(args)
